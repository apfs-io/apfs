// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceAPI_Head_FullMethodName        = "/v1.ServiceAPI/Head"
	ServiceAPI_Get_FullMethodName         = "/v1.ServiceAPI/Get"
	ServiceAPI_Refresh_FullMethodName     = "/v1.ServiceAPI/Refresh"
	ServiceAPI_SetManifest_FullMethodName = "/v1.ServiceAPI/SetManifest"
	ServiceAPI_GetManifest_FullMethodName = "/v1.ServiceAPI/GetManifest"
	ServiceAPI_Upload_FullMethodName      = "/v1.ServiceAPI/Upload"
	ServiceAPI_Delete_FullMethodName      = "/v1.ServiceAPI/Delete"
)

// ServiceAPIClient is the client API for ServiceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// defined in the system.
type ServiceAPIClient interface {
	// Get object information
	Head(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*SimpleObjectResponse, error)
	// Get object and data
	Get(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ObjectResponse], error)
	// Refresh object and reprocess
	Refresh(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*SimpleResponse, error)
	// SetManifest of the group
	SetManifest(ctx context.Context, in *DataManifest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// GetManifest of the group
	GetManifest(ctx context.Context, in *ManifestGroup, opts ...grpc.CallOption) (*ManifestResponse, error)
	// Upload new file as a stream
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Data, SimpleObjectResponse], error)
	// Delete file object or subitems
	Delete(ctx context.Context, in *ObjectIDNames, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type serviceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAPIClient(cc grpc.ClientConnInterface) ServiceAPIClient {
	return &serviceAPIClient{cc}
}

func (c *serviceAPIClient) Head(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*SimpleObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleObjectResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_Head_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) Get(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ObjectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceAPI_ServiceDesc.Streams[0], ServiceAPI_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ObjectID, ObjectResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceAPI_GetClient = grpc.ServerStreamingClient[ObjectResponse]

func (c *serviceAPIClient) Refresh(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) SetManifest(ctx context.Context, in *DataManifest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_SetManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) GetManifest(ctx context.Context, in *ManifestGroup, opts ...grpc.CallOption) (*ManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManifestResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_GetManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Data, SimpleObjectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceAPI_ServiceDesc.Streams[1], ServiceAPI_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Data, SimpleObjectResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceAPI_UploadClient = grpc.ClientStreamingClient[Data, SimpleObjectResponse]

func (c *serviceAPIClient) Delete(ctx context.Context, in *ObjectIDNames, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAPIServer is the server API for ServiceAPI service.
// All implementations must embed UnimplementedServiceAPIServer
// for forward compatibility.
//
// defined in the system.
type ServiceAPIServer interface {
	// Get object information
	Head(context.Context, *ObjectID) (*SimpleObjectResponse, error)
	// Get object and data
	Get(*ObjectID, grpc.ServerStreamingServer[ObjectResponse]) error
	// Refresh object and reprocess
	Refresh(context.Context, *ObjectID) (*SimpleResponse, error)
	// SetManifest of the group
	SetManifest(context.Context, *DataManifest) (*SimpleResponse, error)
	// GetManifest of the group
	GetManifest(context.Context, *ManifestGroup) (*ManifestResponse, error)
	// Upload new file as a stream
	Upload(grpc.ClientStreamingServer[Data, SimpleObjectResponse]) error
	// Delete file object or subitems
	Delete(context.Context, *ObjectIDNames) (*SimpleResponse, error)
	mustEmbedUnimplementedServiceAPIServer()
}

// UnimplementedServiceAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceAPIServer struct{}

func (UnimplementedServiceAPIServer) Head(context.Context, *ObjectID) (*SimpleObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Head not implemented")
}
func (UnimplementedServiceAPIServer) Get(*ObjectID, grpc.ServerStreamingServer[ObjectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServiceAPIServer) Refresh(context.Context, *ObjectID) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedServiceAPIServer) SetManifest(context.Context, *DataManifest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetManifest not implemented")
}
func (UnimplementedServiceAPIServer) GetManifest(context.Context, *ManifestGroup) (*ManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedServiceAPIServer) Upload(grpc.ClientStreamingServer[Data, SimpleObjectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedServiceAPIServer) Delete(context.Context, *ObjectIDNames) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceAPIServer) mustEmbedUnimplementedServiceAPIServer() {}
func (UnimplementedServiceAPIServer) testEmbeddedByValue()                    {}

// UnsafeServiceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAPIServer will
// result in compilation errors.
type UnsafeServiceAPIServer interface {
	mustEmbedUnimplementedServiceAPIServer()
}

func RegisterServiceAPIServer(s grpc.ServiceRegistrar, srv ServiceAPIServer) {
	// If the following call pancis, it indicates UnimplementedServiceAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceAPI_ServiceDesc, srv)
}

func _ServiceAPI_Head_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Head(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_Head_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Head(ctx, req.(*ObjectID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceAPIServer).Get(m, &grpc.GenericServerStream[ObjectID, ObjectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceAPI_GetServer = grpc.ServerStreamingServer[ObjectResponse]

func _ServiceAPI_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Refresh(ctx, req.(*ObjectID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_SetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataManifest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).SetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_SetManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).SetManifest(ctx, req.(*DataManifest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_GetManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).GetManifest(ctx, req.(*ManifestGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceAPIServer).Upload(&grpc.GenericServerStream[Data, SimpleObjectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceAPI_UploadServer = grpc.ClientStreamingServer[Data, SimpleObjectResponse]

func _ServiceAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectIDNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Delete(ctx, req.(*ObjectIDNames))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAPI_ServiceDesc is the grpc.ServiceDesc for ServiceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ServiceAPI",
	HandlerType: (*ServiceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Head",
			Handler:    _ServiceAPI_Head_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _ServiceAPI_Refresh_Handler,
		},
		{
			MethodName: "SetManifest",
			Handler:    _ServiceAPI_SetManifest_Handler,
		},
		{
			MethodName: "GetManifest",
			Handler:    _ServiceAPI_GetManifest_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceAPI_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _ServiceAPI_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _ServiceAPI_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "v1/server.proto",
}
